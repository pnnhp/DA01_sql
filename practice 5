MID COURSE TEST
--Q1--
select  distinct replacement_cost
from film
order by replacement_cost
--Q2--
SELECT 
case
WHEN replacement_cost between 9.99 and 19.99 then 'low'
WHEN replacement_cost between 20.00 and 24.99 then 'med'
when replacement_cost between 25.00 and 29.99 then 'high'
end as category,

sum( CASE WHEN replacement_cost between 9.99 and 19.99 
	then 1 else 0
END) as so_luong

FROM FILM
group by category

--Q3--
select a.title, a.length, b.category_id, c.name 
from public.film as a
inner join public.film_category as b
on a.film_id=b.film_id
inner join public.category as c on b.category_id=c.category_id
where c.name in ('Sports', 'Drama') 
order by a.length desc

--Q4--
SELECT  c.name,
count (c.name) as so_luong
FROM public.film as a
inner join public.film_category as b
on a.film_id=b.film_id
inner join public.category as c 
on b.category_id=c.category_id
group by c.name
order by count (c.name) desc

--Q5--
select a.first_name, a.last_name,
count (a.first_name), count (a.last_name)
from public.actor as a
inner join public.film_actor as b
on a.actor_id=b.actor_id
inner join public.film as c
on b.film_id=c.film_id
group by a.first_name, a.last_name
order by count (a.first_name)desc, count (a.last_name) desc

--Q6--
select a.address, a.address2
from public.address as a
left join public.customer as b
on a.address_id=b.address_id
where a.address2 is null

--Q7--
select a.city,
sum (d.amount) as tong
from city as a
inner join public.address as b
on a.city_id=b.city_id
inner join public.customer as c
on b.address_id=c.address_id
inner join public.payment as d
on c.customer_id=d.customer_id
group by a.city
order by sum (d.amount) desc

--Q8--
select a.city, e.country,
sum (d.amount) as tong
from public.city as a
inner join public.address as b
on a.city_id=b.city_id
inner join public.customer as c
on b.address_id=c.address_id
inner join public.payment as d
on c.customer_id=d.customer_id
inner join public.country as e
on a.country_id=e.country_id
group by a.city, e.country
order by sum (d.amount) desc

PRACTICE 5:
--EX1--
SELECT Country.Continent, FLOOR(AVG(City.Population))
FROM Country, City 
WHERE Country.Code = City.CountryCode 
GROUP BY Country.Continent 

--EX2--
SELECT 
ROUND(SUM(CASE WHEN b.signup_action = 'Confirmed' THEN 1 ELSE 0 END)*1.0 / COUNT(b.signup_action),2)
FROM emails AS a 
LEFT JOIN texts as b  
ON a.email_id  = b.email_id

--EX3--
with time_spent AS
(select a.age_bucket,
sum (case 
  when b.activity_type ='open' then b.time_spent 
  end) as time_open,
sum (case 
  when b.activity_type ='send' then b.time_spent 
  end) as time_send
from age_breakdown as a
inner join activities as b
on a.user_id=b.user_id
group by a.age_bucket)

select c.age_bucket ,
ROUND (100.0* c.time_send/(c.time_send+c.time_open),2) as send_perc,
ROUND (100.0* c.time_open/(c.time_send+c.time_open),2) as open_perc
from time_spent as c

--EX4--
with supercloud as
(select a.customer_id, 
count(distinct b.product_category)
as unique_count
from customer_contracts as a   
inner join products as b
on a.product_id=b.product_id
group by a.customer_id)

select c.customer_id 
from supercloud as c
where unique_count = 3
group by c.customer_id

--EX5--
select 
    m.employee_id, m.name, 
    count (e.employee_id ) as reports_count, 
    round(avg (e.age)) as average_age     
from Employees AS e
inner join Employees as m
on e.reports_to = m.employee_id 
group by m.employee_id, m.name
order by m.employee_id

--EX6--
select 
    a.product_name,
    sum (b.unit) as unit
from Products as a
inner join Orders as b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_name
having sum (b.unit)>=100

--EX7--
SELECT a.page_id
from pages as a
left join page_likes as b
on a.page_id=b.page_id
group by a.page_id
having count (b.page_id)=0 /* or where b.page_id is null thay cho 'having... */



    
